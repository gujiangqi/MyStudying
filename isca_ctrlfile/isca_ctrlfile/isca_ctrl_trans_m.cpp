//**************************************
// Generated by mcpp translator
// Version 1.3
//**************************************

#include"isca_ctrl_trans_m.h"
#include<assert.h>
void
TransData::__write(MLang::OutputStream&__os)const
{
	__os.write_long(create_time);
	__os.write_int(file_type);
	__os.write_int(interval_type);
}
void
TransData::__read(MLang::InputStream&__is)
{
	create_time=__is.read_long();
	file_type=__is.read_int();
	interval_type=__is.read_int();
}
void
CtrlTransPkg::__write(MLang::OutputStream&__os)const
{
	__os.write_int(data_num);
	size_t len_0=data_info_seq.size();
	__os.write_uint(len_0);
	for(size_t i_0=0;i_0<len_0;i_0++)
	{
		data_info_seq[i_0].__write(__os);
	}
}
void
CtrlTransPkg::__read(MLang::InputStream&__is)
{
	data_num=__is.read_int();
	size_t len_0=__is.read_uint();
	data_info_seq.resize(len_0);
	for(size_t i_0=0;i_0<len_0;i_0++)
	{
		data_info_seq[i_0].__read(__is);
	}
}
CtrlTransPkg::CtrlTransPkg()
{
}
CtrlTransPkg::CtrlTransPkg(const CtrlTransPkg&__val)
:data_num(__val.data_num),data_info_seq(__val.data_info_seq)
{

}
CtrlTransPkg&
CtrlTransPkg::operator=(const CtrlTransPkg&__val)
{
	if(this == &__val)
		return *this;
	data_num=__val.data_num;
	data_info_seq=__val.data_info_seq;

	return *this;
}
